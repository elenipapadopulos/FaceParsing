import torchvision.transforms.functional as TF

def my_img_mask_transforms(image, mask):
    resize = transforms.Resize((512, 512))
    totensor = transforms.ToTensor()
    normalize = transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])

    image = resize(image)
    mask = resize(mask)

    seed = np.random.randint(2147483647) 
    random.seed(seed) 
    torch.manual_seed(seed)

    if random.random() > 0.5:
          angle = random.randint(-30, 30)
          image = TF.rotate(image, angle)
          mask = TF.rotate(mask, angle)

    if random.random() > 0.5:
        image = TF.hflip(image)
        mask = TF.hflip(mask)

    if random.random() > 0.5:
        image = TF.vflip(image)
        mask = TF.vflip(mask)

    image = totensor(image)
    image = normalize(image)
    mask = torch.tensor(np.array(mask), dtype=torch.float32)

    return image, mask

class Lapa(Dataset):
    def __init__(self, images_dir, masks_dir, size):
        self.images_dir = images_dir
        self.masks_dir = masks_dir
        self.image_files = os.listdir(images_dir)[:size]

    def __len__(self):
        return len(self.image_files)

    def __getitem__(self, index):
        img_path = os.path.join(self.images_dir, self.image_files[index])
        mask_path = img_path.replace("images", "labels").replace("jpg", "png")
        
        # Open image
        image = Image.open(img_path).convert("RGB")
        
        # Open mask and convert to PIL Image
        mask_img = cv2.imread(mask_path, cv2.IMREAD_GRAYSCALE)
        mask_img = Image.fromarray(cv2.resize(mask_img, (512, 512)))
      

        image, mask_img = my_img_mask_transforms(image, mask_img)

        # Split the masks
        binary_masks = []
        for class_value in range(0, 11):
            binary_mask = (mask_img == class_value).float()
            binary_masks.append(binary_mask)

        return image, torch.stack(binary_masks, dim=0)


#### apply Lapa
train_dataset = Lapa(train_images_path,
                    train_labels_path,
                    1100)

val_dataset = Lapa(validation_images_path,
                   validation_labels_path,
                   250)


###### per vedere che succede
import matplotlib.pyplot as plt
import numpy as np

# Ensure you have train_dataset defined and loaded with your data

for i in range(10):  # Change the range as needed
    img = np.array(train_dataset[i][0].permute(1, 2, 0))
    print(f"Image {i} is tensor: {isinstance(train_dataset[i][1], torch.Tensor)}")
    mask = np.array(train_dataset[i][1])

    num_masks = mask.shape[0]
    fig, axes = plt.subplots(1, num_masks + 1, figsize=(15, 15))

    # Display the original image
    axes[0].imshow(img)
    axes[0].set_title('Original Image')
    axes[0].axis('off')

    # Display each mask
    for m in range(num_masks):
        axes[m + 1].imshow(mask[m])
        axes[m + 1].set_title(f'Mask {m + 1}')
        axes[m + 1].axis('off')

    plt.show()
